"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
var index_1 = require("../../utils/index");
var models_1 = require("./models");
var index_2 = require("../../../core/index");
var index_3 = require("../logging/index");
var services_1 = require("../../../shared/components/loader/services/services");
var ApiService = (function () {
    function ApiService(http, logger, storage, apiServiceOptions, loaderService) {
        this.http = http;
        this.logger = logger;
        this.storage = storage;
        this.apiServiceOptions = apiServiceOptions;
        this.loaderService = loaderService;
    }
    ApiService.prototype.get = function (parameters) {
        this.showLoader();
        this.apiServiceOptions.method = http_1.RequestMethod.Get;
        this.apiServiceOptions.parameters = parameters;
        this.apiServiceOptions.parameters.url = (parameters.concatApi) ? index_1.Config.ENVIRONMENT().API.concat(parameters.url) : parameters.url;
        this.apiServiceOptions.parameters.parameters = parameters.parameters;
        this.apiServiceOptions.parameters.cacheKey = parameters.cacheKey;
        this.apiServiceOptions.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        this.apiServiceOptions.pendingCommandCount = 0;
        this.apiServiceOptions.pendingCommandsSubject = new Rx_1.Subject();
        this.apiServiceOptions.pendingCommands$ = this.apiServiceOptions.pendingCommandsSubject.asObservable();
        return (this.request(this.apiServiceOptions));
    };
    ApiService.prototype.post = function (parameters) {
        this.apiServiceOptions.method = http_1.RequestMethod.Post;
        this.apiServiceOptions.parameters = parameters;
        this.apiServiceOptions.parameters.url = index_1.Config.ENVIRONMENT().API.concat(parameters.url);
        this.apiServiceOptions.pendingCommandCount = 0;
        this.apiServiceOptions.pendingCommandsSubject = new Rx_1.Subject();
        this.apiServiceOptions.pendingCommands$ = this.apiServiceOptions.pendingCommandsSubject.asObservable();
        var isCommand = (this.apiServiceOptions.method !== http_1.RequestMethod.Post);
        if (isCommand) {
            this.apiServiceOptions.pendingCommandsSubject.next(++this.apiServiceOptions.pendingCommandCount);
        }
        return this.request(this.apiServiceOptions);
    };
    ApiService.prototype.mapper = function (parameters) {
        var _this = this;
        this.showLoader();
        var api = (parameters.concatApi) ? 'http://192.168.0.14:9000/api/industries/Ing' : parameters.url;
        this.logger.info(api);
        return this.http.get(api)
            .catch(this.onCatch)
            .finally(function () {
            _this.onEnd();
        });
    };
    ApiService.prototype.request = function (options) {
        var _this = this;
        var requestOptions = null;
        if (options.parameters.allowRequestOption) {
            requestOptions = new http_1.RequestOptions();
            requestOptions.method = options.method;
            requestOptions.url = options.parameters.url;
            requestOptions.headers = options.headers;
            requestOptions.search = (this.buildUrlSearchParams(options.parameters.parameters));
            requestOptions.body = options.parameters.parameters;
        }
        var isCommand = (options.method !== http_1.RequestMethod.Get);
        if (isCommand) {
            options.pendingCommandsSubject.next(++options.pendingCommandCount);
        }
        return (this.http.request(options.parameters.url, requestOptions)
            .map(function (res) { return res.json(); })
            .catch(this.onCatch)
            .do(function (res) {
            _this.onSuccess(res);
        }, function (error) {
            _this.onError(error);
        })
            .finally(function () {
            _this.onEnd();
            if (isCommand)
                options.pendingCommandsSubject.next(--options.pendingCommandCount);
        }));
    };
    ApiService.prototype.buildUrlSearchParams = function (params) {
        var searchParams = new http_1.URLSearchParams();
        for (var key in params) {
            searchParams.append(key, params[key]);
        }
        return searchParams;
    };
    ApiService.prototype.onCatch = function (error, caught) {
        return Rx_1.Observable.throw(error);
    };
    ApiService.prototype.onSuccess = function (res) {
        this.logger.info('Request successful');
    };
    ApiService.prototype.onError = function (res) {
        this.logger.error('Error, status code: '.concat(res.status.toString()));
    };
    ApiService.prototype.onEnd = function () {
        this.hideLoader();
    };
    ApiService.prototype.showLoader = function () {
        this.loaderService.show();
    };
    ApiService.prototype.hideLoader = function () {
        this.loaderService.hide();
    };
    return ApiService;
}());
ApiService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http,
        index_3.LogService,
        index_2.StorageService,
        models_1.ApiServiceOptions,
        services_1.LoaderService])
], ApiService);
exports.ApiService = ApiService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
