"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var index_1 = require("../../core/index");
var TypeAheadComponent = (function () {
    function TypeAheadComponent(renderer) {
        var _this = this;
        this.renderer = renderer;
        this.typeAheadPlaceHolder = '';
        this.typeAheadErrorMessage = '';
        this.typeAheadSelectedIndex = -1;
        this.typeAheadShownChange = new core_1.EventEmitter();
        this._keyword = new BehaviorSubject_1.BehaviorSubject('');
        this.minlength = 2;
        this.onTypeAheadIndexChanged = new core_1.EventEmitter();
        this.templateShown = function () {
            var show = (_this.typeAheadSource && _this.typeAheadShown);
            return show;
        };
    }
    Object.defineProperty(TypeAheadComponent.prototype, "typeAheadShown", {
        get: function () {
            return this._typeAheadShown;
        },
        set: function (value) {
            this._typeAheadShown = !!value;
            this.typeAheadShownChange.emit(this.typeAheadShown);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypeAheadComponent.prototype, "keyword", {
        get: function () {
            return this._keyword.getValue();
        },
        set: function (value) {
            this._keyword.next(value);
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TypeAheadComponent.prototype, "placeholder", {
        get: function () { return this.typeAheadPlaceHolder; },
        set: function (placeholder) {
            this.typeAheadPlaceHolder = (placeholder && placeholder.trim()) || '<no placeholder text set>';
        },
        enumerable: true,
        configurable: true
    });
    TypeAheadComponent.prototype.onKeyDownArrow = function (event) {
        this.typeAheadShown = true;
        this.typeAheadListElementScroll(event);
    };
    TypeAheadComponent.prototype.onTextChange = function (evt) {
        this.subscribeTypeAheadSource(evt.value);
    };
    TypeAheadComponent.prototype.onInput = function (evt) {
        this.subscribeTypeAheadSource(evt.target.value);
    };
    TypeAheadComponent.prototype.subscribeTypeAheadSource = function (value) {
        var _this = this;
        if (value.length <= this.minlength || this.typeAheadShown)
            return;
        this.keyword = value;
        this.source(this._keyword).subscribe(function (results) {
            if (typeof (results) === 'undefined') {
                _this.typeAheadSource = [];
            }
            else {
                _this.typeAheadShown = true;
                _this.typeAheadDictionary = results;
                _this.typeAheadSource = _this.typeAheadDictionary.toArray();
                console.log(JSON.stringify(_this.typeAheadDictionary));
            }
        }).unsubscribe;
    };
    TypeAheadComponent.prototype.onItemTap = function (args) {
        var item = this.typeAheadDictionary.getItemByKey(args.index);
        var input = this.typeAheadInput.nativeElement;
        input.text = item.value;
        input.value = item.value;
        input.focus();
        this.typeAheadShown = false;
        this.onTypeAheadIndexChanged.emit(item.key);
    };
    TypeAheadComponent.prototype.onKeyDownEnter = function (args) {
        var input = this.typeAheadInput.nativeElement;
        this.resetTypeAheadSelectedIndex();
        this.setTypeAheadInputValue(args, input, true);
    };
    TypeAheadComponent.prototype.setTypeAheadInputValue = function (args, input, setFocus) {
        if (setFocus === void 0) { setFocus = false; }
        var item = this.typeAheadDictionary.getItemByKey(args);
        input.value = item.value;
        if (setFocus) {
            input.focus();
            this.typeAheadShown = false;
            this.onTypeAheadIndexChanged.emit(item.key);
        }
    };
    TypeAheadComponent.prototype.typeAheadListElementScroll = function (event) {
        var tal = this.typeAheadList;
        if (typeof (tal) === 'undefined')
            return;
        var ul = tal.nativeElement;
        var elems = ul.getElementsByTagName('li');
        if (elems.length === 0)
            return;
        switch (event) {
            case index_1.Config.EVENTS.ARROW_DOWN:
                if ((this.typeAheadSelectedIndex + 1) >= elems.length)
                    this.resetTypeAheadSelectedIndex();
                this.typeAheadSelectedIndex++;
                break;
            case index_1.Config.EVENTS.ARROW_UP:
                this.typeAheadSelectedIndex--;
                if (this.typeAheadSelectedIndex < 0)
                    this.typeAheadSelectedIndex = (elems.length - 1);
                break;
        }
        var elem = elems[this.typeAheadSelectedIndex];
        this.setTypeAheadInputValue(elem.id, this.typeAheadInput.nativeElement);
        elem.focus();
    };
    TypeAheadComponent.prototype.resetTypeAheadSelectedIndex = function () {
        this.typeAheadSelectedIndex = -1;
    };
    return TypeAheadComponent;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TypeAheadComponent.prototype, "typeAheadShownChange", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], TypeAheadComponent.prototype, "typeAheadShown", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], TypeAheadComponent.prototype, "keyword", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], TypeAheadComponent.prototype, "minlength", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TypeAheadComponent.prototype, "source", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], TypeAheadComponent.prototype, "placeholder", null);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], TypeAheadComponent.prototype, "onTypeAheadIndexChanged", void 0);
__decorate([
    core_1.ViewChild('typeAheadList'),
    __metadata("design:type", core_1.ElementRef)
], TypeAheadComponent.prototype, "typeAheadList", void 0);
__decorate([
    core_1.ViewChild('typeAheadInput'),
    __metadata("design:type", core_1.ElementRef)
], TypeAheadComponent.prototype, "typeAheadInput", void 0);
TypeAheadComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'sd-typeahead',
        templateUrl: index_1.Config.COMPONENT_ITEMS.TEMPLATE,
        styleUrls: [index_1.Config.COMPONENT_ITEMS.CSS],
        changeDetection: core_1.ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [core_1.Renderer])
], TypeAheadComponent);
exports.TypeAheadComponent = TypeAheadComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
