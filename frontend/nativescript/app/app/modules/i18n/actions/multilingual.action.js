Object.defineProperty(exports, "__esModule", { value: true });
// app
var type_1 = require("../../core/utils/type");
// module
var category_common_1 = require("../common/category.common");
exports.ActionTypes = {
    CHANGE: type_1.type("[" + category_common_1.CATEGORY + "] Change"),
    LANG_CHANGED: type_1.type("[" + category_common_1.CATEGORY + "] Lang Changed"),
    LANG_UNSUPPORTED: type_1.type("[" + category_common_1.CATEGORY + "] Lang Unsupported")
};
/**
 * Every action is comprised of at least a type and an optional
 * payload. Expressing actions as classes enables powerful
 * type checking in reducer functions.
 *
 * See Discriminated Unions: https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions
 */
var ChangeAction = (function () {
    function ChangeAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.CHANGE;
    }
    return ChangeAction;
}());
exports.ChangeAction = ChangeAction;
var LangChangedAction = (function () {
    function LangChangedAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.LANG_CHANGED;
    }
    return LangChangedAction;
}());
exports.LangChangedAction = LangChangedAction;
var LangUnsupportedAction = (function () {
    function LangUnsupportedAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.LANG_UNSUPPORTED;
    }
    return LangUnsupportedAction;
}());
exports.LangUnsupportedAction = LangUnsupportedAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2kxOG4vYWN0aW9ucy9tdWx0aWxpbmd1YWwuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxNQUFNO0FBQ04sOENBQTZDO0FBRTdDLFNBQVM7QUFDVCw2REFBcUQ7QUFnQnhDLFFBQUEsV0FBVyxHQUF5QjtJQUMvQyxNQUFNLEVBQVksV0FBSSxDQUFDLE1BQUksMEJBQVEsYUFBVSxDQUFDO0lBQzlDLFlBQVksRUFBTSxXQUFJLENBQUMsTUFBSSwwQkFBUSxtQkFBZ0IsQ0FBQztJQUNwRCxnQkFBZ0IsRUFBRSxXQUFJLENBQUMsTUFBSSwwQkFBUSx1QkFBb0IsQ0FBQztDQUN6RCxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBQ0g7SUFHRSxzQkFBbUIsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFGbEMsU0FBSSxHQUFHLG1CQUFXLENBQUMsTUFBTSxDQUFDO0lBRVksQ0FBQztJQUN6QyxtQkFBQztBQUFELENBSkEsQUFJQyxJQUFBO0FBSlksb0NBQVk7QUFNekI7SUFHRSwyQkFBbUIsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFGbEMsU0FBSSxHQUFHLG1CQUFXLENBQUMsWUFBWSxDQUFDO0lBRU0sQ0FBQztJQUN6Qyx3QkFBQztBQUFELENBSkEsQUFJQyxJQUFBO0FBSlksOENBQWlCO0FBTTlCO0lBR0UsK0JBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRmxDLFNBQUksR0FBRyxtQkFBVyxDQUFDLGdCQUFnQixDQUFDO0lBRUUsQ0FBQztJQUN6Qyw0QkFBQztBQUFELENBSkEsQUFJQyxJQUFBO0FBSlksc0RBQXFCIiwiZmlsZSI6ImFwcC9tb2R1bGVzL2kxOG4vYWN0aW9ucy9tdWx0aWxpbmd1YWwuYWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGlic1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuXG4vLyBhcHBcbmltcG9ydCB7IHR5cGUgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzL3R5cGUnO1xuXG4vLyBtb2R1bGVcbmltcG9ydCB7IENBVEVHT1JZIH0gZnJvbSAnLi4vY29tbW9uL2NhdGVnb3J5LmNvbW1vbic7XG5cbi8qKlxuICogRm9yIGVhY2ggYWN0aW9uIHR5cGUgaW4gYW4gYWN0aW9uIGdyb3VwLCBtYWtlIGEgc2ltcGxlXG4gKiBlbnVtIG9iamVjdCBmb3IgYWxsIG9mIHRoaXMgZ3JvdXAncyBhY3Rpb24gdHlwZXMuXG4gKlxuICogVGhlICd0eXBlJyB1dGlsaXR5IGZ1bmN0aW9uIGNvZXJjZXMgc3RyaW5ncyBpbnRvIHN0cmluZ1xuICogbGl0ZXJhbCB0eXBlcyBhbmQgcnVucyBhIHNpbXBsZSBjaGVjayB0byBndWFyYW50ZWUgYWxsXG4gKiBhY3Rpb24gdHlwZXMgaW4gdGhlIGFwcGxpY2F0aW9uIGFyZSB1bmlxdWUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU11bHRpbGluZ3VhbEFjdGlvbnMge1xuICBDSEFOR0U6IHN0cmluZztcbiAgTEFOR19DSEFOR0VEOiBzdHJpbmc7XG4gIExBTkdfVU5TVVBQT1JURUQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEFjdGlvblR5cGVzOiBJTXVsdGlsaW5ndWFsQWN0aW9ucyA9IHtcbiAgQ0hBTkdFOiAgICAgICAgICAgdHlwZShgWyR7Q0FURUdPUll9XSBDaGFuZ2VgKSxcbiAgTEFOR19DSEFOR0VEOiAgICAgdHlwZShgWyR7Q0FURUdPUll9XSBMYW5nIENoYW5nZWRgKSxcbiAgTEFOR19VTlNVUFBPUlRFRDogdHlwZShgWyR7Q0FURUdPUll9XSBMYW5nIFVuc3VwcG9ydGVkYClcbn07XG5cbi8qKlxuICogRXZlcnkgYWN0aW9uIGlzIGNvbXByaXNlZCBvZiBhdCBsZWFzdCBhIHR5cGUgYW5kIGFuIG9wdGlvbmFsXG4gKiBwYXlsb2FkLiBFeHByZXNzaW5nIGFjdGlvbnMgYXMgY2xhc3NlcyBlbmFibGVzIHBvd2VyZnVsXG4gKiB0eXBlIGNoZWNraW5nIGluIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIFNlZSBEaXNjcmltaW5hdGVkIFVuaW9uczogaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNkaXNjcmltaW5hdGVkLXVuaW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ2hhbmdlQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgdHlwZSA9IEFjdGlvblR5cGVzLkNIQU5HRTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7IH1cbn1cblxuZXhwb3J0IGNsYXNzIExhbmdDaGFuZ2VkQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgdHlwZSA9IEFjdGlvblR5cGVzLkxBTkdfQ0hBTkdFRDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogc3RyaW5nKSB7IH1cbn1cblxuZXhwb3J0IGNsYXNzIExhbmdVbnN1cHBvcnRlZEFjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHR5cGUgPSBBY3Rpb25UeXBlcy5MQU5HX1VOU1VQUE9SVEVEO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHsgfVxufVxuXG4vKipcbiAqIEV4cG9ydCBhIHR5cGUgYWxpYXMgb2YgYWxsIGFjdGlvbnMgaW4gdGhpcyBhY3Rpb24gZ3JvdXBcbiAqIHNvIHRoYXQgcmVkdWNlcnMgY2FuIGVhc2lseSBjb21wb3NlIGFjdGlvbiB0eXBlc1xuICovXG5leHBvcnQgdHlwZSBBY3Rpb25zXG4gID0gQ2hhbmdlQWN0aW9uXG4gIHwgTGFuZ0NoYW5nZWRBY3Rpb25cbiAgfCBMYW5nVW5zdXBwb3J0ZWRBY3Rpb247XG4iXX0=
