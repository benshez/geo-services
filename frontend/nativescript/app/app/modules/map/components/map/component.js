Object.defineProperty(exports, "__esModule", { value: true });
// libs
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var router_1 = require("@angular/router");
// app
var services_1 = require("../../../core/services/api/services");
var index_1 = require("../../../core/index");
// map
var MapBox = require("mapbox-gl");
//import * as MapBoxGeocoder from '@mapbox/mapbox-gl-geocoder';
var WebMapComponent = (function () {
    function WebMapComponent(apiService, fb, apiOptions, route, router) {
        var _this = this;
        this.apiService = apiService;
        this.fb = fb;
        this.apiOptions = apiOptions;
        this.route = route;
        this.router = router;
        this.loading = true;
        this.model = [];
        this.options = {
            accessToken: index_1.Config.ENVIRONMENT().MAP_BOX_API_KEY,
            map: '',
            options: {
                container: 'map',
                style: 'mapbox://styles/mapbox/light-v9',
                center: [152.994306, -26.612273],
                zoom: 13,
                hash: false,
                interactive: false
            }
        };
        this.marker = {
            id: 'marker',
            offset: [-25, -25],
            latLang: [0, 0],
            popup: {
                offset: 25,
                text: ''
            }
        };
        this.markers = [];
        this.onCreateMarker = function () {
            _this.marker.latLang = _this.options.options.center;
            _this.marker.popup.text = 'testing';
            return _this.marker;
        };
        this.onCreateMarkerPopup = function (options) {
            var popup = new MapBox.Popup({ offset: options.offset })
                .setText(options.text);
            return popup;
        };
    }
    WebMapComponent.prototype.ngOnInit = function () {
        this.loading = true;
        //this.onSetLocation(this.options);
        this.returnUrl = this.route.snapshot.queryParams[index_1.Config.ROUTE_PARAMETERS.LOGIN_RETURN_URL] || '/';
        this.options.options.center = [index_1.Config.ROUTE_PARAMETERS.LONGITUDE, index_1.Config.ROUTE_PARAMETERS.LATITUDE];
        this.onMapComponentInit(this.options);
    };
    WebMapComponent.prototype.onMapComponentInit = function (options) {
        this.onAssign(MapBox, 'accessToken', options.accessToken);
        options.map = new MapBox.Map(options.options);
        this.onSetCentre(options);
    };
    WebMapComponent.prototype.onSetCentre = function (options) {
        this.loading = true;
        options.map.setCenter(options.options.center);
        this.onRemoveMarker(this.markers);
        this.onAddMarkers(this.onCreateMarker());
    };
    WebMapComponent.prototype.onRemoveMarker = function (markers) {
        var self = this;
        markers.forEach(function (mark, index) {
            mark.remove();
            markers.splice(index, 1);
        }, this);
    };
    WebMapComponent.prototype.onAddMarkers = function (marker) {
        var el = document.createElement('div');
        el.id = marker.id;
        this.markers.push(new MapBox.Marker(el, { offset: marker.offset })
            .setLngLat(marker.latLang)
            .setPopup(this.onCreateMarkerPopup(marker.popup))
            .addTo(this.options.map));
        this.loading = !this.loading;
    };
    WebMapComponent.prototype.onAssign = function (obj, prop, value) {
        if (typeof prop === 'string')
            prop = prop.split('.');
        if (prop.length > 1) {
            var e = prop.shift();
            this.onAssign(obj[e] =
                Object.prototype.toString.call(obj[e]) === '[object Object]'
                    ? obj[e]
                    : {}, prop, value);
        }
        else
            obj[prop[0]] = value;
    };
    return WebMapComponent;
}());
WebMapComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'sd-map',
        templateUrl: index_1.Config.COMPONENT_ITEMS.TEMPLATE,
        styleUrls: [index_1.Config.COMPONENT_ITEMS.CSS],
    }),
    __metadata("design:paramtypes", [services_1.ApiService,
        forms_1.FormBuilder,
        index_1.ApiServiceParametersOptions,
        router_1.ActivatedRoute,
        router_1.Router])
], WebMapComponent);
exports.WebMapComponent = WebMapComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
