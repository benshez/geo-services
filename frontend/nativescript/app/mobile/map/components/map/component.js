Object.defineProperty(exports, "__esModule", { value: true });
// libs
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
// app
var models_1 = require("../../../../app/modules/core/services/api/models");
var index_1 = require("../../../../app/modules/core/index");
var nativescript_mapbox_1 = require("nativescript-mapbox");
var MapFeature = (function () {
    function MapFeature(id, place_name, center) {
        this.id = id;
        this.place_name = place_name;
        this.center = center;
    }
    return MapFeature;
}());
var NSMapComponent = (function () {
    function NSMapComponent(apiOptions, route, router, map) {
        this.apiOptions = apiOptions;
        this.route = route;
        this.router = router;
        this.map = map;
        this.loading = false;
        this.features = [];
        this.options = {
            accessToken: index_1.Config.ENVIRONMENT().MAP_BOX_API_KEY,
            map: null,
            options: {
                container: 'map',
                style: 'mapbox://styles/mapbox/light-v9',
                center: [152.994306, -26.612273],
                zoom: 1,
                hash: false,
                interactive: false
            }
        };
        this.marker = {
            id: 'marker',
            offset: [-25, -25],
            latLang: [0, 0],
            popup: {
                offset: 25,
                text: ''
            }
        };
        this.markers = [];
    }
    NSMapComponent.prototype.ngOnInit = function () {
        this.returnUrl = this.route.snapshot.queryParams[index_1.Config.ROUTE_PARAMETERS.LOGIN_RETURN_URL] || '/';
        this.options.options.center = [index_1.Config.ROUTE_PARAMETERS.LONGITUDE, index_1.Config.ROUTE_PARAMETERS.LATITUDE];
        this.onShow(this.options);
    };
    NSMapComponent.prototype.onShow = function (options) {
        var self = this;
        this.map.show({
            accessToken: options.accessToken,
            style: nativescript_mapbox_1.MapStyle.DARK,
            margins: {
                left: 10,
                right: 10,
                top: 65,
                bottom: 0
            },
            center: {
                lat: self.options.options.center[1],
                lng: self.options.options.center[0]
            },
            zoomLevel: 13,
            showUserLocation: true,
            hideAttribution: false,
            hideLogo: false,
            hideCompass: true,
            disableRotation: false,
            disableScroll: true,
            disableZoom: true,
        }).then(function (result) {
            self.onMapComponentInit(self.options);
        }, function (error) {
            console.log("mapbox show error: " + error);
        });
    };
    NSMapComponent.prototype.onMapComponentInit = function (options) {
        this.onSetCentre(options);
    };
    NSMapComponent.prototype.onSetCentre = function (options) {
        this.loading = true;
        this.map.setCenter({
            lat: options.options.center[1],
            lng: options.options.center[0],
            animated: false
        });
        this.onRemoveMarker();
        this.marker.latLang = this.options.options.center;
        this.marker.popup.text = 'testing';
        this.onAddMarkers(this.marker);
    };
    NSMapComponent.prototype.onRemoveMarker = function () {
        this.map.removeMarkers();
    };
    NSMapComponent.prototype.onAddMarkers = function (marker) {
        this.map.addMarkers([
            {
                id: marker.id,
                lat: marker.latLang[1],
                lng: marker.latLang[0],
                title: marker.popup.text,
                subtitle: 'Infamous subtitle!',
                icon: 'res://marker25_29',
                //icon: 'https://farm9.staticflickr.com/8571/15844010757_63b093d527_n.jpg', // from the internet (see the note at the bottom of this readme), or:
                iconPath: 'res://marker25_29',
                onTap: this.onTap,
                onCalloutTap: this.onCalloutTap
            }
        ]);
        this.loading = !this.loading;
    };
    NSMapComponent.prototype.onTap = function (marker) {
        console.log("Marker tapped with title: '" + marker.title + "'");
    };
    NSMapComponent.prototype.onCalloutTap = function (marker) {
        console.log("Marker callout tapped with title: '" + marker.title + "'");
    };
    return NSMapComponent;
}());
NSMapComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'sd-map',
        templateUrl: index_1.Config.COMPONENT_ITEMS.TEMPLATE,
        styleUrls: [index_1.Config.COMPONENT_ITEMS.CSS],
        changeDetection: core_1.ChangeDetectionStrategy.OnPush,
        providers: [nativescript_mapbox_1.Mapbox]
    }),
    __metadata("design:paramtypes", [models_1.ApiServiceParametersOptions,
        router_1.ActivatedRoute,
        router_1.Router,
        nativescript_mapbox_1.Mapbox])
], NSMapComponent);
exports.NSMapComponent = NSMapComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
