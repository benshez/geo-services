Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
// app
var index_1 = require("../../../../app/modules/core/index");
var models_1 = require("../../../../app/modules/core/services/api/models");
var service_1 = require("../../../../app/modules/map/services/service");
var nativescript_geolocation_1 = require("nativescript-geolocation");
var NSMapLocationsComponent = (function () {
    function NSMapLocationsComponent(location, routerext) {
        var _this = this;
        this.location = location;
        this.routerext = routerext;
        this.showMapPlaces = false;
        this.onBindIndustries = function (keyword) {
            var args = {
                keyword: keyword,
                key: 'id',
                value: 'description',
                delay: 400,
                apiOptions: null,
                minQueryLength: 2,
                cacheKey: 'industries'.concat('_').concat('{query}'),
                DeepObjectName: ''
            };
            args.apiOptions = new models_1.ApiServiceParametersOptions();
            args.apiOptions.url = index_1.Config.API_END_POINTS.INDUSTRIES.concat('{query}');
            args.apiOptions.parameters = '';
            args.apiOptions.concatApi = true;
            return _this.location.onSearch(args);
        };
        this.onBindPlaces = function (keyword) {
            var args = {
                keyword: keyword,
                key: 'center',
                value: 'place_name',
                delay: 400,
                apiOptions: null,
                minQueryLength: 2,
                cacheKey: 'places'.concat('_').concat('{query}'),
                DeepObjectName: 'features'
            };
            args.apiOptions = new models_1.ApiServiceParametersOptions();
            args.apiOptions.url = index_1.Config.ENVIRONMENT().MAP_BOX_API.concat('{query}').concat('.json?access_token=').concat(index_1.Config.ENVIRONMENT().MAP_BOX_API_KEY); //Config.API_END_POINTS.INDUSTRIES.concat('{query}');
            args.apiOptions.parameters = '';
            args.apiOptions.concatApi = false;
            return _this.location.onSearch(args);
        };
        nativescript_geolocation_1.enableLocationRequest(true);
    }
    NSMapLocationsComponent.prototype.onIndustryChange = function (args) {
        this.showMapPlaces = false;
        if (args !== '') {
            index_1.Config.ROUTE_PARAMETERS.INDUSTRY = args.key;
            this.showMapPlaces = true;
        }
    };
    NSMapLocationsComponent.prototype.onPlaceChange = function (args) {
        if (args && this.showMapPlaces) {
            index_1.Config.ROUTE_PARAMETERS.LONGITUDE = args[0];
            index_1.Config.ROUTE_PARAMETERS.LATITUDE = args[1];
            this.onNavigate();
        }
    };
    NSMapLocationsComponent.prototype.onSetLocation = function () {
        var self = this;
        nativescript_geolocation_1.getCurrentLocation({
            desiredAccuracy: 3,
            updateDistance: 1,
            maximumAge: 20000,
            timeout: 20000
        }).then(function (position) {
            console.log('loc found');
            if (position) {
                index_1.Config.ROUTE_PARAMETERS.LONGITUDE = position.longitude;
                index_1.Config.ROUTE_PARAMETERS.LATITUDE = position.latitude;
                self.onNavigate();
            }
            else {
                self.onNavigate();
            }
        }).catch(function (response) {
            self.onNavigate();
        });
    };
    NSMapLocationsComponent.prototype.onNavigate = function () {
        this.routerext.navigate([index_1.Config.ROUTE_ROUTES.MAP], {
            transition: {
                duration: index_1.Config.TRANSITION.DURATION,
                name: index_1.Config.TRANSITION.SLIDE_TOP,
            }
        });
    };
    NSMapLocationsComponent.prototype.onItemTap = function (args) {
        if (this.showMapPlaces) {
            var lbl = args.view.getViewById('lbl' + args.index);
            index_1.Config.ROUTE_PARAMETERS.LONGITUDE = lbl.center[0];
            index_1.Config.ROUTE_PARAMETERS.LATITUDE = lbl.center[1];
            this.onNavigate();
        }
    };
    return NSMapLocationsComponent;
}());
NSMapLocationsComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'sd-locations',
        templateUrl: index_1.Config.COMPONENT_ITEMS.TEMPLATE,
        styleUrls: [index_1.Config.COMPONENT_ITEMS.CSS],
        changeDetection: core_1.ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [service_1.Locator, index_1.RouterExtensions])
], NSMapLocationsComponent);
exports.NSMapLocationsComponent = NSMapLocationsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
