Object.defineProperty(exports, "__esModule", { value: true });
var frame_1 = require("ui/frame");
var app = require("application");
var platform_1 = require("platform");
var color_1 = require("color");
var ActionBarUtil = (function () {
    function ActionBarUtil() {
    }
    ActionBarUtil.SET_TITLE = function (title) {
        var actionBar = frame_1.topmost().currentPage.actionBar;
        actionBar.title = title;
    };
    ActionBarUtil.ADD_BUTTON = function (button) {
        // NOTE: This MUST be called BEFORE SET_TITLE on start
        frame_1.topmost().currentPage.actionBar.actionItems.addItem(button);
    };
    ActionBarUtil.HIDE_BACK_BUTTON = function () {
        if (frame_1.topmost().ios) {
            frame_1.topmost().ios.controller.visibleViewController.navigationItem.setHidesBackButtonAnimated(true, false);
        }
    };
    ActionBarUtil.EMPTY_ITEMS = function () {
        var actionBar = frame_1.topmost().currentPage.actionBar;
        var actionItems = actionBar.actionItems.getItems();
        actionItems.forEach(function (item) {
            actionBar.actionItems.removeItem(item);
        });
    };
    ActionBarUtil.STATUSBAR_STYLE = function (style) {
        if (frame_1.topmost().ios) {
            var navigationBar = frame_1.topmost().ios.controller.navigationBar;
            // 0: default
            // 1: light
            navigationBar.barStyle = style;
        }
        else if (platform_1.isAndroid) {
            if (app.android && platform_1.device.sdkVersion >= '21') {
                try {
                    var LayoutParams = android.view.WindowManager.LayoutParams;
                    var win = void 0;
                    if (app.android.foregroundActivity) {
                        win = app.android.foregroundActivity.getWindow();
                    }
                    else {
                        win = app.android.startActivity.getWindow();
                    }
                    win.addFlags(LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
                    win.setStatusBarColor(new color_1.Color(style || '#3280CF').android);
                }
                catch (err) {
                    console.log(err);
                }
            }
        }
    };
    return ActionBarUtil;
}());
exports.ActionBarUtil = ActionBarUtil;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vYmlsZS9jb3JlL3V0aWxzL2FjdGlvbmJhci51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxrQ0FBbUM7QUFFbkMsaUNBQW1DO0FBQ25DLHFDQUE2QztBQUM3QywrQkFBOEI7QUFLOUI7SUFBQTtJQThDQSxDQUFDO0lBN0NlLHVCQUFTLEdBQXZCLFVBQXdCLEtBQWE7UUFDbkMsSUFBSSxTQUFTLEdBQUcsZUFBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQztRQUNoRCxTQUFTLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBQ2Esd0JBQVUsR0FBeEIsVUFBeUIsTUFBa0I7UUFDekMsc0RBQXNEO1FBQ3RELGVBQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBQ2EsOEJBQWdCLEdBQTlCO1FBQ0UsRUFBRSxDQUFDLENBQUMsZUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsQixlQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEcsQ0FBQztJQUNILENBQUM7SUFDYSx5QkFBVyxHQUF6QjtRQUNFLElBQUksU0FBUyxHQUFHLGVBQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFDaEQsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSTtZQUN2QixTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDYSw2QkFBZSxHQUE3QixVQUE4QixLQUFzQjtRQUNsRCxFQUFFLENBQUMsQ0FBQyxlQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksYUFBYSxHQUFHLGVBQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1lBQzNELGFBQWE7WUFDYixXQUFXO1lBQ1gsYUFBYSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakMsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxvQkFBUyxDQUFDLENBQUMsQ0FBQztZQUNyQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLGlCQUFNLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQztvQkFDSCxJQUFJLFlBQVksR0FBUSxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7b0JBQ2hFLElBQUksR0FBRyxTQUFLLENBQUM7b0JBQ2IsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7d0JBQ25DLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUNuRCxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNOLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDOUMsQ0FBQztvQkFFRCxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO29CQUM3RCxHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxhQUFLLENBQVMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN2RSxDQUFDO2dCQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkIsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0E5Q0EsQUE4Q0MsSUFBQTtBQTlDWSxzQ0FBYSIsImZpbGUiOiJtb2JpbGUvY29yZS91dGlscy9hY3Rpb25iYXIudXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvcG1vc3QgfSBmcm9tICd1aS9mcmFtZSc7XG5pbXBvcnQgeyBBY3Rpb25JdGVtLCBBY3Rpb25JdGVtcyB9IGZyb20gJ3VpL2FjdGlvbi1iYXInO1xuaW1wb3J0ICogYXMgYXBwIGZyb20gJ2FwcGxpY2F0aW9uJztcbmltcG9ydCB7IGRldmljZSwgaXNBbmRyb2lkIH0gZnJvbSAncGxhdGZvcm0nO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdjb2xvcic7XG5kZWNsYXJlIHZhciBhbmRyb2lkO1xuXG5kZWNsYXJlIHZhciBVSUJhclN0eWxlOiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25CYXJVdGlsIHtcbiAgcHVibGljIHN0YXRpYyBTRVRfVElUTEUodGl0bGU6IHN0cmluZykge1xuICAgIHZhciBhY3Rpb25CYXIgPSB0b3Btb3N0KCkuY3VycmVudFBhZ2UuYWN0aW9uQmFyO1xuICAgIGFjdGlvbkJhci50aXRsZSA9IHRpdGxlO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgQUREX0JVVFRPTihidXR0b246IEFjdGlvbkl0ZW0pIHtcbiAgICAvLyBOT1RFOiBUaGlzIE1VU1QgYmUgY2FsbGVkIEJFRk9SRSBTRVRfVElUTEUgb24gc3RhcnRcbiAgICB0b3Btb3N0KCkuY3VycmVudFBhZ2UuYWN0aW9uQmFyLmFjdGlvbkl0ZW1zLmFkZEl0ZW0oYnV0dG9uKTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIEhJREVfQkFDS19CVVRUT04oKSB7XG4gICAgaWYgKHRvcG1vc3QoKS5pb3MpIHtcbiAgICAgIHRvcG1vc3QoKS5pb3MuY29udHJvbGxlci52aXNpYmxlVmlld0NvbnRyb2xsZXIubmF2aWdhdGlvbkl0ZW0uc2V0SGlkZXNCYWNrQnV0dG9uQW5pbWF0ZWQodHJ1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgc3RhdGljIEVNUFRZX0lURU1TKCkge1xuICAgIHZhciBhY3Rpb25CYXIgPSB0b3Btb3N0KCkuY3VycmVudFBhZ2UuYWN0aW9uQmFyO1xuICAgIHZhciBhY3Rpb25JdGVtcyA9IGFjdGlvbkJhci5hY3Rpb25JdGVtcy5nZXRJdGVtcygpO1xuICAgIGFjdGlvbkl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGFjdGlvbkJhci5hY3Rpb25JdGVtcy5yZW1vdmVJdGVtKGl0ZW0pO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgU1RBVFVTQkFSX1NUWUxFKHN0eWxlOiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICBpZiAodG9wbW9zdCgpLmlvcykge1xuICAgICAgbGV0IG5hdmlnYXRpb25CYXIgPSB0b3Btb3N0KCkuaW9zLmNvbnRyb2xsZXIubmF2aWdhdGlvbkJhcjtcbiAgICAgIC8vIDA6IGRlZmF1bHRcbiAgICAgIC8vIDE6IGxpZ2h0XG4gICAgICBuYXZpZ2F0aW9uQmFyLmJhclN0eWxlID0gc3R5bGU7XG4gICAgfSBlbHNlIGlmIChpc0FuZHJvaWQpIHtcbiAgICAgIGlmIChhcHAuYW5kcm9pZCAmJiBkZXZpY2Uuc2RrVmVyc2lvbiA+PSAnMjEnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IExheW91dFBhcmFtcyA9IDxhbnk+YW5kcm9pZC52aWV3LldpbmRvd01hbmFnZXIuTGF5b3V0UGFyYW1zO1xuICAgICAgICAgIGxldCB3aW46IGFueTtcbiAgICAgICAgICBpZiAoYXBwLmFuZHJvaWQuZm9yZWdyb3VuZEFjdGl2aXR5KSB7XG4gICAgICAgICAgICB3aW4gPSBhcHAuYW5kcm9pZC5mb3JlZ3JvdW5kQWN0aXZpdHkuZ2V0V2luZG93KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbiA9IGFwcC5hbmRyb2lkLnN0YXJ0QWN0aXZpdHkuZ2V0V2luZG93KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2luLmFkZEZsYWdzKExheW91dFBhcmFtcy5GTEFHX0RSQVdTX1NZU1RFTV9CQVJfQkFDS0dST1VORFMpO1xuICAgICAgICAgIHdpbi5zZXRTdGF0dXNCYXJDb2xvcihuZXcgQ29sb3IoPHN0cmluZz5zdHlsZSB8fCAnIzMyODBDRicpLmFuZHJvaWQpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=
