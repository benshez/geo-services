Object.defineProperty(exports, "__esModule", { value: true });
// angular
var testing_1 = require("@angular/core/testing");
var testing_2 = require("@angular/router/testing");
// libs
var angulartics2_1 = require("angulartics2");
// app
var index_1 = require("../test/index");
// module
var service_1 = require("./service");
var testModuleConfig = function () {
    testing_1.TestBed.configureTestingModule({
        imports: [
            testing_2.RouterTestingModule,
            angulartics2_1.Angulartics2Module.forRoot([
                angulartics2_1.Angulartics2Segment
            ])
        ],
        providers: [
            service_1.AnalyticsService
        ]
    });
};
function main() {
    index_1.t.describe('analytics:', function () {
        index_1.t.be(testModuleConfig);
        index_1.t.describe('AnalyticsService', function () {
            index_1.t.describe('api works', function () {
                index_1.t.it('track', index_1.t.inject([service_1.AnalyticsService, angulartics2_1.Angulartics2Segment], function (analyticsService, segment) {
                    analyticsService.devMode(false);
                    index_1.t.spyOn(segment, 'eventTrack');
                    analyticsService.track('click', { category: 'TEST', label: 'Testing' });
                    index_1.t.e(segment.eventTrack).toHaveBeenCalledWith('click', { category: 'TEST', label: 'Testing' });
                }));
                index_1.t.it('track devMode: ON', index_1.t.inject([service_1.AnalyticsService, angulartics2_1.Angulartics2Segment], function (analyticsService, segment) {
                    index_1.t.spyOn(segment, 'eventTrack');
                    // dev mode: shouldn't track anything
                    analyticsService.devMode(true);
                    analyticsService.track('click', { category: 'TEST', label: 'Testing' });
                    index_1.t.e(segment.eventTrack).not.toHaveBeenCalled();
                }));
                index_1.t.it('pageTrack', index_1.t.inject([service_1.AnalyticsService, angulartics2_1.Angulartics2Segment], function (analyticsService, segment) {
                    index_1.t.spyOn(segment, 'pageTrack');
                    analyticsService.pageTrack('/testing', {});
                    index_1.t.e(segment.pageTrack).toHaveBeenCalledWith('/testing', {});
                }));
                index_1.t.it('pageTrack devMode: ON', index_1.t.inject([service_1.AnalyticsService, angulartics2_1.Angulartics2Segment], function (analyticsService, segment) {
                    index_1.t.spyOn(segment, 'pageTrack');
                    // dev mode: shouldn't track anything
                    analyticsService.devMode(true);
                    analyticsService.pageTrack('/testing', {});
                    index_1.t.e(segment.pageTrack).not.toHaveBeenCalled();
                }));
                index_1.t.it('identify', index_1.t.inject([service_1.AnalyticsService, angulartics2_1.Angulartics2Segment], function (analyticsService, segment) {
                    index_1.t.spyOn(segment, 'setUserProperties');
                    analyticsService.identify({ userId: 1, name: 'Test', email: 'name@domain.com' });
                    index_1.t.e(segment.setUserProperties).toHaveBeenCalledWith({ userId: 1, name: 'Test', email: 'name@domain.com' });
                }));
                index_1.t.it('identify devMode: ON', index_1.t.inject([service_1.AnalyticsService, angulartics2_1.Angulartics2Segment], function (analyticsService, segment) {
                    index_1.t.spyOn(segment, 'setUserProperties');
                    // dev mode: shouldn't track anything
                    analyticsService.devMode(true);
                    analyticsService.identify({ userId: 1, name: 'Test', email: 'name@domain.com' });
                    index_1.t.e(segment.setUserProperties).not.toHaveBeenCalled();
                }));
            });
        });
        index_1.t.describe('Analytics (Base Class)', function () {
            index_1.t.describe('should allow descendants to track actions', function () {
                index_1.t.it('track', index_1.t.inject([service_1.AnalyticsService, angulartics2_1.Angulartics2Segment], function (analyticsService, segment) {
                    index_1.t.spyOn(analyticsService, 'track');
                    var analytics = new TestAnalytics(analyticsService);
                    analytics.category = 'TEST';
                    analytics.track('action', { category: analytics.category, label: 'Testing' });
                    index_1.t.e(analyticsService.track).toHaveBeenCalledWith('action', { category: analytics.category, label: 'Testing' });
                }));
            });
        });
    });
}
exports.main = main;
var TestAnalytics = (function (_super) {
    __extends(TestAnalytics, _super);
    function TestAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TestAnalytics;
}(service_1.Analytics));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
