Object.defineProperty(exports, "__esModule", { value: true });
// libs
var core_1 = require("@angular/core");
// app
var index_1 = require("../../../core/index");
var service_1 = require("../../services/service");
var WebMapLocationComponent = (function () {
    function WebMapLocationComponent(location, routerext) {
        var _this = this;
        this.location = location;
        this.routerext = routerext;
        this.showMapPlaces = false;
        this.onBindIndustries = function (keyword) {
            var args = {
                keyword: keyword,
                key: 'id',
                value: 'description',
                delay: 400,
                apiOptions: null,
                minQueryLength: 2,
                cacheKey: 'industries'.concat('_').concat('{query}'),
                DeepObjectName: ''
            };
            args.apiOptions = new index_1.ApiServiceParametersOptions();
            args.apiOptions.url = index_1.Config.API_END_POINTS.INDUSTRIES.concat('{query}');
            args.apiOptions.parameters = '';
            args.apiOptions.concatApi = true;
            return _this.location.onSearch(args);
        };
        this.onBindPlaces = function (keyword) {
            var args = {
                keyword: keyword,
                key: 'center',
                value: 'place_name',
                delay: 400,
                apiOptions: null,
                minQueryLength: 2,
                cacheKey: 'places'.concat('_').concat('{query}'),
                DeepObjectName: 'features'
            };
            args.apiOptions = new index_1.ApiServiceParametersOptions();
            args.apiOptions.url = index_1.Config.ENVIRONMENT().MAP_BOX_API.concat('{query}').concat('.json?access_token=').concat(index_1.Config.ENVIRONMENT().MAP_BOX_API_KEY); //Config.API_END_POINTS.INDUSTRIES.concat('{query}');
            args.apiOptions.parameters = '';
            args.apiOptions.concatApi = false;
            return _this.location.onSearch(args);
        };
    }
    WebMapLocationComponent.prototype.onIndustryChange = function (args) {
        this.showMapPlaces = false;
        if (args !== '') {
            index_1.Config.ROUTE_PARAMETERS.INDUSTRY = args;
            this.showMapPlaces = true;
        }
    };
    WebMapLocationComponent.prototype.onPlaceChange = function (args) {
        if (args && this.showMapPlaces) {
            index_1.Config.ROUTE_PARAMETERS.LONGITUDE = args[0];
            index_1.Config.ROUTE_PARAMETERS.LATITUDE = args[1];
            this.onNavigate();
        }
    };
    WebMapLocationComponent.prototype.onSetLocation = function () {
        var self = this;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                index_1.Config.ROUTE_PARAMETERS.LONGITUDE = position.coords.longitude;
                index_1.Config.ROUTE_PARAMETERS.LATITUDE = position.coords.latitude;
                self.onNavigate();
            }, function (error) { self.onNavigate(); }, { maximumAge: 60000, timeout: 10000 });
        }
        else {
            self.onNavigate();
        }
    };
    WebMapLocationComponent.prototype.onNavigate = function () {
        this.routerext.navigate([index_1.Config.ROUTE_ROUTES.MAP], {
            transition: {
                duration: index_1.Config.TRANSITION.DURATION,
                name: index_1.Config.TRANSITION.SLIDE_TOP,
            }
        });
    };
    return WebMapLocationComponent;
}());
WebMapLocationComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'sd-locations',
        templateUrl: index_1.Config.COMPONENT_ITEMS.TEMPLATE,
        styleUrls: [index_1.Config.COMPONENT_ITEMS.CSS]
    }),
    __metadata("design:paramtypes", [service_1.Locator, index_1.RouterExtensions])
], WebMapLocationComponent);
exports.WebMapLocationComponent = WebMapLocationComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
